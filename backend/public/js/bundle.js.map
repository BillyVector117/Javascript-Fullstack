{"version":3,"sources":["webpack://javascript-fullstack/./node_modules/timeago.js/esm/lang/en_US.js","webpack://javascript-fullstack/./node_modules/timeago.js/esm/lang/zh_CN.js","webpack://javascript-fullstack/./node_modules/timeago.js/esm/register.js","webpack://javascript-fullstack/./node_modules/timeago.js/esm/utils/date.js","webpack://javascript-fullstack/./node_modules/timeago.js/esm/index.js","webpack://javascript-fullstack/./frontend/UI.js","webpack://javascript-fullstack/./frontend/services/BookService.js","webpack://javascript-fullstack/./node_modules/timeago.js/esm/format.js","webpack://javascript-fullstack/./frontend/app.js"],"names":["EN_US","ZH_CN","Locales","register","locale","func","SEC_ARRAY","toDate","input","Date","isNaN","test","parseInt","trim","replace","diff","idx","unit","Math","floor","bookService","this","URI","books","fetch","json","console","log","book","method","body","then","res","data","catch","err","bookId","response","headers","getBooks","booksCardContainer","document","getElementById","innerHTML","forEach","div","createElement","date","opts","className","imagePath","title","author","_id","created_at","localeFunc","agoIn","totalSec","abs","length","toString","relativeDate","appendChild","postBook","clearBookForm","renderBooks","reset","message","colorMessage","secondsToRemove","createTextNode","container","querySelector","bookForm","insertBefore","setTimeout","remove","deleteBook","addEventListener","e","value","isbn","image","files","formData","FormData","append","ui","addANewBook","renderMessage","preventDefault","target","classList","contains","getAttribute"],"mappings":"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","file":"js/bundle.js","sourcesContent":["var EN_US = ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'];\nexport default function (diff, idx) {\n    if (idx === 0)\n        return ['just now', 'right now'];\n    var unit = EN_US[Math.floor(idx / 2)];\n    if (diff > 1)\n        unit += 's';\n    return [diff + \" \" + unit + \" ago\", \"in \" + diff + \" \" + unit];\n}\n//# sourceMappingURL=en_US.js.map","var ZH_CN = ['秒', '分钟', '小时', '天', '周', '个月', '年'];\nexport default function (diff, idx) {\n    if (idx === 0)\n        return ['刚刚', '片刻后'];\n    var unit = ZH_CN[~~(idx / 2)];\n    return [diff + \" \" + unit + \"\\u524D\", diff + \" \" + unit + \"\\u540E\"];\n}\n//# sourceMappingURL=zh_CN.js.map","/**\n * Created by hustcc on 18/5/20.\n * Contract: i@hust.cc\n */\n/**\n * All supported locales\n */\nvar Locales = {};\n/**\n * register a locale\n * @param locale\n * @param func\n */\nexport var register = function (locale, func) {\n    Locales[locale] = func;\n};\n/**\n * get a locale, default is en_US\n * @param locale\n * @returns {*}\n */\nexport var getLocale = function (locale) {\n    return Locales[locale] || Locales['en_US'];\n};\n//# sourceMappingURL=register.js.map","/**\n * Created by hustcc on 18/5/20.\n * Contract: i@hust.cc\n */\nvar SEC_ARRAY = [\n    60,\n    60,\n    24,\n    7,\n    365 / 7 / 12,\n    12,\n];\n/**\n * format Date / string / timestamp to timestamp\n * @param input\n * @returns {*}\n */\nexport function toDate(input) {\n    if (input instanceof Date)\n        return input;\n    // @ts-ignore\n    if (!isNaN(input) || /^\\d+$/.test(input))\n        return new Date(parseInt(input));\n    input = (input || '')\n        // @ts-ignore\n        .trim()\n        .replace(/\\.\\d+/, '') // remove milliseconds\n        .replace(/-/, '/')\n        .replace(/-/, '/')\n        .replace(/(\\d)T(\\d)/, '$1 $2')\n        .replace(/Z/, ' UTC') // 2017-2-5T3:57:52Z -> 2017-2-5 3:57:52UTC\n        .replace(/([+-]\\d\\d):?(\\d\\d)/, ' $1$2'); // -04:00 -> -0400\n    return new Date(input);\n}\n/**\n * format the diff second to *** time ago, with setting locale\n * @param diff\n * @param localeFunc\n * @returns\n */\nexport function formatDiff(diff, localeFunc) {\n    /**\n     * if locale is not exist, use defaultLocale.\n     * if defaultLocale is not exist, use build-in `en`.\n     * be sure of no error when locale is not exist.\n     *\n     * If `time in`, then 1\n     * If `time ago`, then 0\n     */\n    var agoIn = diff < 0 ? 1 : 0;\n    /**\n     * Get absolute value of number (|diff| is non-negative) value of x\n     * |diff| = diff if diff is positive\n     * |diff| = -diff if diff is negative\n     * |0| = 0\n     */\n    diff = Math.abs(diff);\n    /**\n     * Time in seconds\n     */\n    var totalSec = diff;\n    /**\n     * Unit of time\n     */\n    var idx = 0;\n    for (; diff >= SEC_ARRAY[idx] && idx < SEC_ARRAY.length; idx++) {\n        diff /= SEC_ARRAY[idx];\n    }\n    /**\n     * Math.floor() is alternative of ~~\n     *\n     * The differences and bugs:\n     * Math.floor(3.7) -> 4 but ~~3.7 -> 3\n     * Math.floor(1559125440000.6) -> 1559125440000 but ~~1559125440000.6 -> 52311552\n     *\n     * More information about the performance of algebraic:\n     * https://www.youtube.com/watch?v=65-RbBwZQdU\n     */\n    diff = Math.floor(diff);\n    idx *= 2;\n    if (diff > (idx === 0 ? 9 : 1))\n        idx += 1;\n    return localeFunc(diff, idx, totalSec)[agoIn].replace('%s', diff.toString());\n}\n/**\n * calculate the diff second between date to be formatted an now date.\n * @param date\n * @param relativeDate\n * @returns {number}\n */\nexport function diffSec(date, relativeDate) {\n    var relDate = relativeDate ? toDate(relativeDate) : new Date();\n    return (+relDate - +toDate(date)) / 1000;\n}\n/**\n * nextInterval: calculate the next interval time.\n * - diff: the diff sec between now and date to be formatted.\n *\n * What's the meaning?\n * diff = 61 then return 59\n * diff = 3601 (an hour + 1 second), then return 3599\n * make the interval with high performance.\n **/\nexport function nextInterval(diff) {\n    var rst = 1, i = 0, d = Math.abs(diff);\n    for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY.length; i++) {\n        diff /= SEC_ARRAY[i];\n        rst *= SEC_ARRAY[i];\n    }\n    d = d % rst;\n    d = d ? rst - d : rst;\n    return Math.ceil(d);\n}\n//# sourceMappingURL=date.js.map","/**\n * Created by hustcc on 18/5/20.\n * Contract: i@hust.cc\n */\nimport en_US from './lang/en_US';\nimport zh_CN from './lang/zh_CN';\nimport { register } from './register';\nregister('en_US', en_US);\nregister('zh_CN', zh_CN);\nexport { format } from './format';\nexport { render, cancel } from './realtime';\nexport { register };\n//# sourceMappingURL=index.js.map","// Modulo que interactua con el DOM\r\n\r\nimport BookService from './services/BookService';\r\n// const BookService = require('./services/BookService');\r\nconst bookService = new BookService(); // Instanciar un nuevo objeto de la clase BookService (contiene métodos para crud)\r\n\r\nimport { format } from 'timeago.js'; // Importa el método format de la libreria timeago (modifica los timestamp a tiempo transcurrido actual)\r\nclass UI {\r\n\r\n    // Método que se ejecutara apenas inicia la aplicación (Muestra/renderiza libros obtenidos)\r\n    async renderBooks() {\r\n        const books = await bookService.getBooks(); // Captura de libros asincrona\r\n        console.log(books); // Muestra los libros capturados desde el backend\r\n\r\n        // Renderiza los libros en el elemento HTML\r\n        const booksCardContainer = document.getElementById('books-cards'); // Captura el elemento HTML con dicho id\r\n        booksCardContainer.innerHTML = ''; // Garantizar que el espacio este vacio (Asi no se duplicaran elementos)\r\n        // Iteración, por cada libro capturado desde el backend realiza...\r\n        books.forEach(book => {\r\n            // Crea una tarjeta en donde colocaremos cada libro iterado\r\n            const div = document.createElement('div'); // Crea un elemento 'div' HTML\r\n            div.className = ''; // Agrega una clase al div creadó\r\n            // Dento del div, inserta esta porción de estuctura HTML ( Para cada iteración de libro)\r\n            div.innerHTML = `\r\n                <div class=\"card m-2\" id=\"card\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-4 gh\">\r\n                            <img src=\"http://localhost:4000${book.imagePath}\" alt=\"\" class=\"img-fluid\" />\r\n                        </div>\r\n                            <div class=\"col-md-8\">\r\n                                <div class=\"card-block px-2\">\r\n                                <h4 class=\"card-title\">${book.title}</h4>\r\n                                <p class=\"card-text\">${book.author}</p>\r\n                                <a href=\"#\" class=\"btn btn-danger delete\" _id=\"${book._id}\">X</a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                        <div class=\"card-footer\">\r\n                        ${format(book.created_at)}\r\n                        </div>\r\n                    </div>\r\n                 `;\r\n    // Agregamos la estructura HTML recien creada a este elemento HTML seleccionadó\r\n        booksCardContainer.appendChild(div);\r\n        })\r\n    }\r\n \r\n    // Método que se ejecuta al dar Submit en el formulario\r\n    async addANewBook(book) { // Recibe por parametro un objeto libro\r\n        await bookService.postBook(book); // De los métodos crud de BookService, usar el POST (postBook) y pasarle por parametro los datos del formulario virtual\r\n        //Una vez finalize de agregar el libro, limpia los inputs del formulario\r\n        this.clearBookForm();\r\n        // Al dar submit a un nuevo libro, este se mostrara sin recargar la página por el metodo de renderBooks\r\n        this.renderBooks(); // Ejecuta el método para renderizar, mostrar los libros capturados (tiene la lógica para mostrar todos los libros creados)\r\n    }\r\n\r\n    // Método para limpiar los datos del formulario al ingresar un nuevo libro\r\n    async clearBookForm() {\r\n        document.getElementById('book-form').reset(); // Captura el id del formulario y resetea sus datos \r\n    }\r\n\r\n    // Método para crear un elemento (div) y mostrar un mensaje al eliminar o agregar un libro\r\n    async renderMessage(message, colorMessage, secondsToRemove) { // Mensaje que se mostrara, color del mensaje y el tiempo para removerlo\r\n        const div = document.createElement('div'); // Crea un elemento HTML de tipo 'div'\r\n        div.className = `alert alert-${colorMessage} message `; // En base a agregar o eliminar un libro la alerta sera verde / roja\r\n        div.appendChild(document.createTextNode(message)); // Inserta dentro del div recien creado el mensaje (parametro)\r\n        const container = document.querySelector('.col-md-4') // Selecciona el elemento HTML con la clase col-md-4 ( el contenedor de todo el formulario, ya que el mensaje se mostrara sobre esté)\r\n        const bookForm = document.querySelector('#book-form') // Selecciona el elemento HTML con id book-form (formulario)\r\n        container.insertBefore(div, bookForm) // Desde el contenedor seleccionado, inserta el div (mensaje) antes del bookForm\r\n        setTimeout(() => {\r\n          document.querySelector('.message').remove(); // Selecciona el elemento con la clase message (Alerta) y eliminalo...\r\n        }, secondsToRemove); // Solo dura cierto tiempo ( tiempo pasado como parametro al método)\r\n    }\r\n\r\n    async deleteBook(bookId) {\r\n        await bookService.deleteBook(bookId); // Elimina el libro, el bookId es el parametro pasado al darle click en delete, \r\n        this.renderBooks(); // // Ejecuta el método para renderizar, mostrar los libros capturados (tiene la lógica para mostrar todos los libros creados), Asi se recarga la página sola\r\n    }\r\n}\r\n\r\nexport default UI;\r\n//module.exports = UI;","class BookService {\r\n\r\n    constructor() {\r\n        this.URI = 'http://localhost:4000/api/books';\r\n    }\r\n    // Método para obtener libros\r\n    async getBooks() {\r\n        // Petición GET, hacer una petición a this.URI\r\n        const response = await fetch(this.URI);\r\n        // la respuesta es un String, por lo que se tendra que convertir a JSON\r\n        const books = response.json(); // Conversión de datos\r\n        console.log(books)\r\n        return books;\r\n    }\r\n\r\n    // Método para guardar un libro\r\n    async postBook(book) {\r\n        let res = await fetch(this.URI, { // Petición fetch a this.URI con cabeceras\r\n            method:'POST', // Se usara método POST\r\n            body: book // El cuerpo sera el dato que se envira al backend (book)\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {console.log(data)})\r\n        .catch(err=> console.log(err))\r\n        //let data = await res.json(); // Guarda la respuesta en formato JSON\r\n        /* console.log('book added: ', data); */\r\n        \r\n        // return data;\r\n    }\r\n \r\n    // Método para eliminar un libro ( Se hara una petición delete al URL del libro en especifico)\r\n    async deleteBook(bookId) { // Ej. (http://localhost:4000/api/books/${Id del libro a eliminar}), se concatena el url con el id del libro\r\n        const response = await fetch(`${this.URI}/${bookId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            method: 'Delete' // Usa el método delete\r\n        });\r\n        const data = await response.json();\r\n        console.log(data);\r\n    }\r\n}\r\nexport default BookService;\r\n//module.exports = BookService;","import { formatDiff, diffSec } from './utils/date';\nimport { getLocale } from './register';\n/**\n * format a TDate into string\n * @param date\n * @param locale\n * @param opts\n */\nexport var format = function (date, locale, opts) {\n    // diff seconds\n    var sec = diffSec(date, opts && opts.relativeDate);\n    // format it with locale\n    return formatDiff(sec, getLocale(locale));\n};\n//# sourceMappingURL=format.js.map","import \"./styles/app.css\";\r\n//require('./styles/app.css'); // Requerimos el css para que Webpack lo compile\r\n\r\n//const UI = require('./UI.js');\r\nimport UI from './UI.js';\r\n\r\n// Apenas cargue la aplicación ejecuta esta función\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const ui = new UI(); // Instanciamos nuevo objeto de UI (Asi podremos usar sus métodos)\r\n    ui.renderBooks(); // Ejecutamos su método para mostrar/renderizar libros (El método enlista los libros capturados)\r\n})\r\ndocument.getElementById('book-form')\r\n    .addEventListener('submit', function (e) {\r\n        // Capturar valor de cada imput \r\n        let title = document.getElementById('title').value;\r\n        let author = document.getElementById('author').value;\r\n        let isbn = document.getElementById('isbn').value;\r\n        let image = document.getElementById('image').files;\r\n\r\n        // Creación de formulario virtual para pasarle TODOS los datos al BookServices por su método POST (Sera un solo objeto)\r\n        let formData = new FormData(); // Instancia de formulario virtual\r\n        // Agregar al formulario virtual propiedades clave-valor\r\n        formData.append('image', image[0]);\r\n        formData.append('title', title);\r\n        formData.append('author', author);\r\n        formData.append('isbn', isbn);\r\n\r\n        let ui =  new UI(); //  Instanciamos un nuevo objeto de la clase UI, contiene métodos para el DOM\r\n        ui.addANewBook(formData); // Usa el método para agregar un nuevo libro en UI (addANewBook) pasandole por parametro los datos agrupados del formulario virtual\r\n        console.log('succefully added');\r\n        // Una vez guardado el libro, ejecuta el método para mostrar alerta de guardado\r\n        ui.renderMessage('new Book Added', 'success', 3000);\r\n        e.preventDefault();\r\n    });\r\n\r\n    document.getElementById('books-cards') // Selecciona el elemento HTML con id books-cards (lado derecho)\r\n        .addEventListener('click', e => { // Agrega un evento al dar click...\r\n            // Ejecuta una validación, si el elemento clickeado contiene la clase 'delete', (botón eliminar)\r\n            if ( e.target.classList.contains('delete')) {\r\n                let ui =  new UI(); // Instanciamos un nuevo objeto de la clase UI, para usar su método de eliminar\r\n                ui.deleteBook(e.target.getAttribute('_id')); // Se elimina el libro\r\n                console.log( 'Eliminando elementos de: ', e.target.getAttribute('_id')) // Obtenemos el id del libro (el botón tiene como propiedad el mismo id del libro)\r\n                // Una vez guardado el libro, ejecuta el método para mostrar alerta de eliminado\r\n                ui.renderMessage('Book Removed', 'danger', 3000);\r\n            }\r\n            e.preventDefault();\r\n        });"],"sourceRoot":""}